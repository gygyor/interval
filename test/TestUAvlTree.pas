unit TestUAvlTree;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, UAvlTree, SysUtils, System.Generics.Defaults;

type
  // Test methods for class TAvlTree
  TestTAvlTree = class(TTestCase)
  strict private
    FAvlTree: TAvlTree<integer, string>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSearchItem;
    procedure TestDeleteItem;
    procedure TestEnsureItem;
    procedure TestBehaviour;
    procedure TestAddItem;
  end;

implementation

uses
  Math;

type
  TAvlTreeItemIntStrFriend = class(TAvlTreeItem<integer, string>)
  end;
  TAvlTreeIntStrFriend = class(TAvlTree<integer, string>)
  end;

function CheckIsAVL(Item: TAvlTreeItem<integer, string>): boolean;
var
  f: TAvlTreeItemIntStrFriend;
begin
  if not Assigned(Item) then
    Exit(True);

  f := TAvlTreeItemIntStrFriend(Item);

  Result := CheckIsAVL(f.FLeft) and CheckIsAVL(F.FRight)
      and (F.Height = 1 + Max(TAvlTreeItemIntStrFriend(f.FLeft).SafeGetHeight,
                              TAvlTreeItemIntStrFriend(f.FRight).SafeGetHeight));
end;

procedure TestTAvlTree.SetUp;
begin
  FAvlTree := TAvlTree<integer, string>.Create(TComparer<Integer>.Default, nil);
end;

procedure TestTAvlTree.TearDown;
begin
  FAvlTree.Free;
  FAvlTree := nil;
end;

procedure TestTAvlTree.TestSearchItem;
begin
  FAvlTree.Clear;
  FAvlTree.AddItem(58);
  FAvlTree.AddItem(51);
  FAvlTree.AddItem(1);
  FAvlTree.AddItem(12);
  FAvlTree.AddItem(15);

  CheckTrue(Assigned(FAvlTree.SearchItem(12)));
  CheckFalse(Assigned(FAvlTree.SearchItem(13)));
end;

procedure TestTAvlTree.TestDeleteItem;
var
  Item: TAvlTreeItem<integer, string>;
  PrevItem: TAvlTreeItem<integer, string>;
  i: integer;
begin
  FAvlTree.Clear;
  FAvlTree.AddItem(58);
  FAvlTree.AddItem(51);
  FAvlTree.AddItem(1);
  FAvlTree.AddItem(12);
  FAvlTree.AddItem(15);

  Item := FAvlTree.Min;
  for I := 1 to 3 do
  begin
    PrevItem:=Item;
    Item:=Item.Next;
    FAvlTree.DeleteItem(PrevItem);
  end;

  CheckEquals(2, FAvlTree.Count);
  CheckEquals(FAvlTree.Min.Key, 51);
  CheckEquals(FAvlTree.Max.Key, 58);

  FAvlTree.Clear;
  for I := 1 to 500 do
    FAvlTree.AddItem(I);
  I := 0;
  while FAvlTree.Count > 0 do
  begin
    inc(i);
    if I mod 2 = 0 then
      FAvlTree.DeleteItem(FAvlTree.Min)
    else
      FAvlTree.DeleteItem(FAvlTree.Max);
    CheckTrue(CheckIsAVL(TAvlTreeIntStrFriend(FAvlTree).FRoot));
  end;
end;

procedure TestTAvlTree.TestEnsureItem;
begin
  FAvlTree.Clear;
  FAvlTree.AddItem(58);
  FAvlTree.AddItem(51);
  FAvlTree.AddItem(1);
  FAvlTree.AddItem(12);
  FAvlTree.AddItem(15);

  FAvlTree.EnsureItem(13).Data := 'x';
  CheckEquals(6, FAvlTree.Count);
  CheckEquals(FAvlTree.SearchItem(13).Data, 'x');
  FAvlTree.EnsureItem(13).Data := 'y';
  CheckEquals(FAvlTree.SearchItem(13).Data, 'y');
  CheckEquals(6, FAvlTree.Count);
  FAvlTree.DeleteItem(FAvlTree.SearchItem(13));
  CheckEquals(5, FAvlTree.Count);
  FAvlTree.EnsureItem(13).Data := 'x';
  CheckEquals(6, FAvlTree.Count);
end;

procedure TestTAvlTree.TestBehaviour;
var
  Item: TAvlTreeItem<integer, string>;
  Key: integer;
  i: integer;
begin
  FAvlTree.Clear;
  CheckEquals(0, FAvlTree.Count);
  FAvlTree.AddItem(12);
  FAvlTree.AddItem(13);
  CheckEquals(2, FAvlTree.Count);
  CheckException(
      procedure
      begin
        FAvlTree.AddItem(13);
      end,
      EKeyConflict
    );
  CheckEquals(2, FAvlTree.Count);
  Key := 1;
  Item := FAvlTree.AddItem(Key);
  CheckEquals(Item.Key, Key);
  FAvlTree.Clear;
  for i := 1 to 100 do
  begin
    FAvlTree.AddItem(i);
    CheckTrue(CheckIsAVL(TAvlTreeIntStrFriend(FAvlTree).FRoot));
  end;
  Item := FAvlTree.Min;
  i := 1;
  while Assigned(Item) do
  begin
    CheckEquals(Item.Key, i);
    Item := Item.Next;
    inc(i);
  end;
  CheckEquals(100, FAvlTree.Count);
  CheckTrue(CheckIsAVL(TAvlTreeIntStrFriend(FAvlTree).FRoot));
  Status(Format('Height: %d',[FAvlTree.Height]));
end;

procedure TestTAvlTree.TestAddItem;
var
  Item: TAvlTreeItem<integer, string>;
begin
  FAvlTree.Clear;
  FAvlTree.AddItem(12);
  Item:=TAvlTreeItem<integer, string>.Create(FAvlTree, 13);
  Item.Data := 'x';
  CheckEquals(2, FAvlTree.Count);

  Item:=TAvlTreeItem<integer, string>.Create(nil, 1);
  Item.Data := 'y';
  CheckEquals(2, FAvlTree.Count);
  FAvlTree.AddItem(Item);
  CheckEquals(3, FAvlTree.Count);

  CheckEquals(FAvlTree.EnsureItem(1).Data, 'y');
  CheckEquals(3, FAvlTree.Count);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAvlTree.Suite);
end.

